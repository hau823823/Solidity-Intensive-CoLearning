<!-- Content_START -->


### 2024.09.25

第四节：函数输出

1、returns和return的区别
returns：跟在函数名后面，用于声明返回的变量类型及变量名。
return：用于函数主体中，返回指定的变量。

2、命名式返回​
若在 returns 中标明返回变量的名称，Solidity 会初始化这些变量，并且自动返回这些函数的值，无需使用 return。也可以在命名式返回中用 return 来返回变量。

示例：

// 命名式返回
function returnNamed() public pure returns(uint256 _number, bool _bool, uint256[3] memory _array){
    _number = 2;
    _bool = false;
    _array = [uint256(3),2,1];
}

// 命名式返回，依然支持return
function returnNamed2() public pure returns(uint256 _number, bool _bool, uint256[3] memory _array){
    return(1, true, [uint256(1),2,5]);
}

3、Solidity 支持使用解构式赋值规则来读取函数的全部或部分返回值。
1）读取所有返回值：声明变量，然后将要赋值的变量用,隔开，按顺序排列。
2）读取部分返回值：声明要读取的返回值对应的变量，不读取的留空。

问题1：什么是解构式赋值

GPT答：

解构式赋值（Destructuring Assignment）是一种编程技术，允许从数组或对象中将多个值同时赋给变量。它的主要特点是可以在一行代码中将复合数据结构（如数组、元组、返回多个值的函数）分解，并分别赋给多个变量。

###



<!-- Content_END -->
